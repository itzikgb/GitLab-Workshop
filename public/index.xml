<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GitLab DevOps Modernization Workshop on CI/CD</title>
    <link>/</link>
    <description>Recent content in GitLab DevOps Modernization Workshop on CI/CD</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS Event Engine</title>
      <link>/10_getting_started/1_aws_event_engine.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10_getting_started/1_aws_event_engine.html</guid>
      <description>Logging into AWS Event Engine To complete this workshop, you are provided with an AWS account via the AWS Event Engine service. A 12-digit hash will be provided to you by event staff - this is your unique access code. eg:
e8476543c00e  Go to https://dashboard.eventengine.run to log into AWS Event Engine.   Enter your unique 12-digit hash code and choose Accept Terms &amp;amp; Login.   Choose AWS Console, then Open AWS Console.</description>
    </item>
    
    <item>
      <title>Agile Management</title>
      <link>/5_overview/agile.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/5_overview/agile.html</guid>
      <description>Agile Planning and Management By empowering teams, embracing change, and focusing on delivering value, Agile methodologies have transformed software development. Agile teams create more relevant, valuable, customer-centric products, more quickly than ever.
Development teams accelerate the delivery of value with iterative, incremental, and lean project methodologies including Scrum, Kanban, Extreme Programming (XP), and more. Large enterprises have adopted Agile at enterprise scale through a variety of frameworks, including Scaled Agile Framework (SAFe), Spotify, Large Scale Scrum (LeSS), and others.</description>
    </item>
    
    <item>
      <title>AWS Account</title>
      <link>/10_getting_started/2_aws_account.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10_getting_started/2_aws_account.html</guid>
      <description>You are responsible for the cost of the AWS services used while running this workshop in your AWS account.
 Your account must have the ability to create new IAM roles and scope other IAM permissions.
 If you already have an AWS account, and have IAM Administrator access, go to Provision VPC &amp;amp; Cloud9
 Create an account  If you don&amp;rsquo;t already have an AWS account with Administrator access: create one now</description>
    </item>
    
    <item>
      <title>Configure the .gitlab-ci.yml file in the project</title>
      <link>/34_lab4/configuration.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/34_lab4/configuration.html</guid>
      <description>Configure the CI/CD in the project In the root of the project you imported in lab2 there is already .gitlab-ci.yml file that includes build and test stages, and jobs in each stage.
We will add one additional job to this configuration file, deploy:
 deploy will deploy the sample website to S3.  Open the Web IDE. On the left, open the .gitlab-ci.yml file. You will notice stages keyword, with build, test and deploy stages.</description>
    </item>
    
    <item>
      <title>Version Control and Collaboration (VC&amp;C)</title>
      <link>/5_overview/vcc.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/5_overview/vcc.html</guid>
      <description>Version Control and Collaboration (VC&amp;amp;C)  As organizations accelerate delivery, through DevOps, controlling and managing different versions of the application assets from code to configuration and from design to deployment is incredibly important. Velocity without robust version control and traceability is like driving a car with out a seatbelt.
Version Control and Collaboration is more than simply tracking changes, versions, and branches of code. Effectively, it includes practices such as:</description>
    </item>
    
    <item>
      <title>Continuous Integration (CI)</title>
      <link>/5_overview/ci.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/5_overview/ci.html</guid>
      <description>Continuous Integration (CI)  The Continuous Integration (CI) use case is a staple of modern software development in the digital age. It&amp;rsquo;s unlikely that you hear the word &amp;ldquo;DevOps&amp;rdquo; without a reference to &amp;ldquo;Continuous Integration and Continuous Delivery&amp;rdquo; (CI/CD) soon after. In the most basic sense, the CI part of the equation enables development teams to automate building and testing their code.
When practicing CI, teams collaborate on projects by using a shared repository to store, modify and track frequent changes to their codebase.</description>
    </item>
    
    <item>
      <title>DevSecOps (Shift Left Security)</title>
      <link>/5_overview/devsecops.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/5_overview/devsecops.html</guid>
      <description>DevSecOps The DevSecOps usecase is applicable for customers who are trying to &amp;ldquo;shift left&amp;rdquo; to find security vulnerabilities earlier within their DevOps methodology but have not been able to achieve expected results.
Application Security is hard when security is separated from your DevOps flow. Security has traditionally been the final hurdle in the development life cycle. Iterative development workflows can make security a release bottleneck. Customers don&amp;rsquo;t have enough security people to test all of their code, and hiring more security analysts won&amp;rsquo;t automatically reduce the friction between app sec and engineering teams.</description>
    </item>
    
    <item>
      <title>Import repository</title>
      <link>/32_lab2/import_project.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/32_lab2/import_project.html</guid>
      <description>We will import an existing sample application developed in gatsby.
 Click New project.  Select Import project  Select Repo by URL  Under Git repository URL, enter this URL https://gitlab.com/tech-marketing/my-static-website.git.  Scroll down and click Create project.  The import takes a few seconds. ✅ Well done! You successfully created project in your GitLab instance.  </description>
    </item>
    
    <item>
      <title>Continuous Delivery (CD)</title>
      <link>/5_overview/cd.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/5_overview/cd.html</guid>
      <description>Continuous Delivery “Deployment is manual”
“Functional tests are manual”
“Time consuming or lack of rollback on performance degradation or production errors”
“Hard to maintain environment configurations and hard to operate”
“No consistency in deployment process”
“Manual / hard coded configurations”
“No standardized software artifact”
“No release management in place”
“Too dependent on other teams to get any release done”
If these are the typical problems you face, Continuous Delivery is for you.</description>
    </item>
    
    <item>
      <title>Install and register Runner</title>
      <link>/32_lab2/runner.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/32_lab2/runner.html</guid>
      <description>⭐Lab Objectives Runner machines are the build agents that run the CI/CD jobs. We will install GitLab Runner and Docker engine. We run all jobs inside the images, and therefore the runner machine requires Docker engine on the runner machine.
We will configure the Runner and register it to work with our GitLab project.
Running jobs inside container has several advantages: Jobs are isolated which avoid compatibility issues, and they run in a secured environment.</description>
    </item>
    
    <item>
      <title>Create an IAM Policy</title>
      <link>/33_lab3/iam_policy.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/33_lab3/iam_policy.html</guid>
      <description>Create an IAM Policy for the Gitlab Runner. In order to be able to deploy our website to an S3 bucket we need to allow our runner to access S3. We do that with an EC2 Instance policy that we attach to our Gitlab Instance.
 In the AWS Console we select from the upper bar &amp;ldquo;Services&amp;rdquo; - &amp;gt; &amp;ldquo;IAM&amp;rdquo;
 In the IAM Page we select &amp;ldquo;Roles&amp;rdquo; From the left side then &amp;ldquo;Create Role&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>GitOps</title>
      <link>/5_overview/gitops.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/5_overview/gitops.html</guid>
      <description>GitOps The need for GitOps Modern applications are developed with rapid iteration and run at highly dynamic scale. In an organization with a mature DevOps culture code can be deployed to production hundreds of times per day. Applications can then run under highly dynamic loads from a few users to millions. Modern infrastructure needs to be elastic. Capacity that can be dynamically provisioned and de-provisioned is able to keep pace with load maintaining optimal performance and minimal cost.</description>
    </item>
    
    <item>
      <title>Attach IAM Policy To Gitlab Runner</title>
      <link>/33_lab3/iam_attach.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/33_lab3/iam_attach.html</guid>
      <description>Attach IAM Policy To Gitlab Runner For the Gitlab runner to use the role we just create, we must attach it to the EC2 Machine that runs our Runner. In our case our Gitlab Server.
 In the AWS Console we select from the upper bar Services - &amp;gt; EC2, and open our instance.  Select our Gitlab machine, then click Actions -&amp;gt; Security -&amp;gt; Modify IAM Role.  From the dropdown in the page that opened select the role we create in the previous step.</description>
    </item>
    
    <item>
      <title>Create and S3 Bucket and Setup Static Hosting</title>
      <link>/33_lab3/s3_create.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/33_lab3/s3_create.html</guid>
      <description>Create and S3 Bucket and Setup Static Hosting To host our site we will leverage S3 Static Hosting capability. First, we need to create an S3 bucket.
 In the AWS Console we select from the upper bar Services - &amp;gt; S3
 On The S3 page, select Buckets then Create Bucket.  Give the bucket a unique name, then scroll down to the Block Public Access settings section.  In the Block Public Access settings section, Remove the check box next to Block all public access, and add a check box at bottom to acknowledge public access.</description>
    </item>
    
  </channel>
</rss>
